const createDemoData = async () => {
  try {
    console.log('üöÄ Creating Demo Data...\n');
    
    const baseUrl = 'http://localhost:3000';
    
    // Sample data for projects
    const projects = [
      {
        name: "Nh√† A To√†n H∆∞∆°ng T√≠ch L∆∞∆°ng",
        description: "D·ª± √°n x√¢y d·ª±ng nh√† ·ªü d√¢n c∆∞ t·∫°i H∆∞∆°ng T√≠ch L∆∞∆°ng",
        address: "S·ªë nh√† A, H∆∞∆°ng T√≠ch L∆∞∆°ng",
        city: "H√† N·ªôi",
        province: "H√† N·ªôi",
        status: "planning",
        startDate: "2024-01-01",
        endDate: "2024-12-31",
        budget: 5000000000,
        projectManagerId: "pm-001"
      },
      {
        name: "Chung c∆∞ Green Tower",
        description: "D·ª± √°n chung c∆∞ cao c·∫•p t·∫°i qu·∫≠n C·∫ßu Gi·∫•y",
        address: "123 ƒê∆∞·ªùng C·∫ßu Gi·∫•y, Qu·∫≠n C·∫ßu Gi·∫•y",
        city: "H√† N·ªôi",
        province: "H√† N·ªôi",
        status: "in_progress",
        startDate: "2024-02-01",
        endDate: "2025-06-30",
        budget: 15000000000,
        projectManagerId: "pm-002"
      },
      {
        name: "Tr∆∞·ªùng h·ªçc Ti·ªÉu h·ªçc Hoa Mai",
        description: "X√¢y d·ª±ng tr∆∞·ªùng ti·ªÉu h·ªçc m·ªõi t·∫°i huy·ªán ƒê√¥ng Anh",
        address: "456 ƒê∆∞·ªùng Qu·ªëc l·ªô 3, ƒê√¥ng Anh",
        city: "H√† N·ªôi",
        province: "H√† N·ªôi",
        status: "completed",
        startDate: "2023-06-01",
        endDate: "2024-05-31",
        budget: 8000000000,
        projectManagerId: "pm-003"
      },
      {
        name: "B·ªánh vi·ªán ƒêa khoa T√¢n Mai",
        description: "X√¢y d·ª±ng b·ªánh vi·ªán ƒëa khoa hi·ªán ƒë·∫°i",
        address: "789 ƒê∆∞·ªùng T√¢n Mai, Ho√†ng Mai",
        city: "H√† N·ªôi",
        province: "H√† N·ªôi",
        status: "in_progress",
        startDate: "2024-03-15",
        endDate: "2025-12-31",
        budget: 20000000000,
        projectManagerId: "pm-004"
      },
      {
        name: "Khu ƒë√¥ th·ªã m·ªõi Vinhomes",
        description: "D·ª± √°n khu ƒë√¥ th·ªã m·ªõi v·ªõi ƒë·∫ßy ƒë·ªß ti·ªán √≠ch",
        address: "Khu ƒë√¥ th·ªã Vinhomes, Nam T·ª´ Li√™m",
        city: "H√† N·ªôi",
        province: "H√† N·ªôi",
        status: "planning",
        startDate: "2024-07-01",
        endDate: "2026-12-31",
        budget: 50000000000,
        projectManagerId: "pm-005"
      },
      {
        name: "Nh√† m√°y s·∫£n xu·∫•t ƒëi·ªán t·ª≠",
        description: "X√¢y d·ª±ng nh√† m√°y s·∫£n xu·∫•t linh ki·ªán ƒëi·ªán t·ª≠",
        address: "Khu c√¥ng nghi·ªáp B·∫Øc ThƒÉng Long",
        city: "H√† N·ªôi",
        province: "H√† N·ªôi",
        status: "in_progress",
        startDate: "2024-01-15",
        endDate: "2024-11-30",
        budget: 12000000000,
        projectManagerId: "pm-006"
      },
      {
        name: "Trung t√¢m th∆∞∆°ng m·∫°i Vincom",
        description: "X√¢y d·ª±ng trung t√¢m th∆∞∆°ng m·∫°i hi·ªán ƒë·∫°i",
        address: "321 ƒê∆∞·ªùng L√°ng, ƒê·ªëng ƒêa",
        city: "H√† N·ªôi",
        province: "H√† N·ªôi",
        status: "completed",
        startDate: "2023-01-01",
        endDate: "2023-12-31",
        budget: 18000000000,
        projectManagerId: "pm-007"
      },
      {
        name: "Khu ngh·ªâ d∆∞·ª°ng cao c·∫•p",
        description: "D·ª± √°n khu ngh·ªâ d∆∞·ª°ng 5 sao t·∫°i V·ªãnh H·∫° Long",
        address: "V·ªãnh H·∫° Long, Qu·∫£ng Ninh",
        city: "H·∫° Long",
        province: "Qu·∫£ng Ninh",
        status: "planning",
        startDate: "2024-09-01",
        endDate: "2026-08-31",
        budget: 30000000000,
        projectManagerId: "pm-008"
      },
      {
        name: "C·∫ßu v∆∞·ª£t Ng√£ t∆∞ S·ªü",
        description: "X√¢y d·ª±ng c·∫ßu v∆∞·ª£t t·∫°i ng√£ t∆∞ S·ªü",
        address: "Ng√£ t∆∞ S·ªü, ƒê·ªëng ƒêa",
        city: "H√† N·ªôi",
        province: "H√† N·ªôi",
        status: "in_progress",
        startDate: "2024-04-01",
        endDate: "2025-03-31",
        budget: 6000000000,
        projectManagerId: "pm-009"
      },
      {
        name: "Tr∆∞·ªùng ƒê·∫°i h·ªçc C√¥ng ngh·ªá",
        description: "X√¢y d·ª±ng c∆° s·ªü m·ªõi cho tr∆∞·ªùng ƒë·∫°i h·ªçc",
        address: "Khu ƒë√¥ th·ªã ƒê·∫°i h·ªçc Qu·ªëc gia",
        city: "H√† N·ªôi",
        province: "H√† N·ªôi",
        status: "in_progress",
        startDate: "2024-02-15",
        endDate: "2025-08-31",
        budget: 25000000000,
        projectManagerId: "pm-010"
      },
      {
        name: "Nh√† ga s√¢n bay N·ªôi B√†i",
        description: "M·ªü r·ªông nh√† ga T2 s√¢n bay N·ªôi B√†i",
        address: "S√¢n bay N·ªôi B√†i, S√≥c S∆°n",
        city: "H√† N·ªôi",
        province: "H√† N·ªôi",
        status: "planning",
        startDate: "2024-10-01",
        endDate: "2027-09-30",
        budget: 40000000000,
        projectManagerId: "pm-011"
      },
      {
        name: "Khu d√¢n c∆∞ Eco City",
        description: "D·ª± √°n khu d√¢n c∆∞ sinh th√°i th√¥ng minh",
        address: "Khu ƒë√¥ th·ªã Eco City, Long Bi√™n",
        city: "H√† N·ªôi",
        province: "H√† N·ªôi",
        status: "in_progress",
        startDate: "2024-05-01",
        endDate: "2026-04-30",
        budget: 35000000000,
        projectManagerId: "pm-012"
      }
    ];

    // Sample work items for each project
    const workItemTemplates = [
      { name: "ƒê√†o m√≥ng", description: "ƒê√†o m√≥ng v√† x·ª≠ l√Ω n·ªÅn m√≥ng", category: "foundation", priority: "high" },
      { name: "ƒê·ªï b√™ t√¥ng m√≥ng", description: "ƒê·ªï b√™ t√¥ng m√≥ng v√† c·ªôt", category: "concrete", priority: "high" },
      { name: "X√¢y t∆∞·ªùng", description: "X√¢y t∆∞·ªùng g·∫°ch v√† b√™ t√¥ng", category: "masonry", priority: "medium" },
      { name: "L·∫Øp ƒë·∫∑t ƒëi·ªán", description: "L·∫Øp ƒë·∫∑t h·ªá th·ªëng ƒëi·ªán", category: "electrical", priority: "medium" },
      { name: "L·∫Øp ƒë·∫∑t n∆∞·ªõc", description: "L·∫Øp ƒë·∫∑t h·ªá th·ªëng c·∫•p tho√°t n∆∞·ªõc", category: "plumbing", priority: "medium" },
      { name: "L√°t n·ªÅn", description: "L√°t n·ªÅn g·∫°ch v√† ƒë√°", category: "flooring", priority: "low" },
      { name: "S∆°n t∆∞·ªùng", description: "S∆°n t∆∞·ªùng v√† trang tr√≠", category: "painting", priority: "low" },
      { name: "L·∫Øp ƒë·∫∑t c·ª≠a", description: "L·∫Øp ƒë·∫∑t c·ª≠a v√† c·ª≠a s·ªï", category: "doors_windows", priority: "medium" },
      { name: "L·∫Øp ƒë·∫∑t m√°i", description: "L·∫Øp ƒë·∫∑t m√°i t√¥n v√† tho√°t n∆∞·ªõc", category: "roofing", priority: "high" },
      { name: "Ho√†n thi·ªán", description: "Ho√†n thi·ªán v√† d·ªçn d·∫πp", category: "finishing", priority: "low" },
      { name: "Ki·ªÉm tra ch·∫•t l∆∞·ª£ng", description: "Ki·ªÉm tra v√† nghi·ªám thu", category: "inspection", priority: "high" },
      { name: "B√†n giao", description: "B√†n giao c√¥ng tr√¨nh", category: "handover", priority: "high" }
    ];

    // Sample daily log data
    const dailyLogTemplates = [
      {
        title: "Kh·ªüi c√¥ng d·ª± √°n",
        weather: "n·∫Øng",
        temperature: 28,
        workDescription: "B·∫Øt ƒë·∫ßu kh·ªüi c√¥ng d·ª± √°n, chu·∫©n b·ªã m·∫∑t b·∫±ng",
        workHours: 8,
        workersCount: 15,
        issues: "Kh√¥ng c√≥ v·∫•n ƒë·ªÅ g√¨",
        notes: "Th·ªùi ti·∫øt thu·∫≠n l·ª£i cho vi·ªác thi c√¥ng"
      },
      {
        title: "ƒê√†o m√≥ng v√† x·ª≠ l√Ω n·ªÅn",
        weather: "n·∫Øng",
        temperature: 30,
        workDescription: "Ti·∫øn h√†nh ƒë√†o m√≥ng v√† x·ª≠ l√Ω n·ªÅn m√≥ng theo thi·∫øt k·∫ø",
        workHours: 9,
        workersCount: 20,
        issues: "ƒê·∫•t n·ªÅn h∆°i ·∫©m",
        notes: "C·∫ßn ch√∫ √Ω x·ª≠ l√Ω tho√°t n∆∞·ªõc"
      },
      {
        title: "ƒê·ªï b√™ t√¥ng m√≥ng",
        weather: "m√¢y",
        temperature: 26,
        workDescription: "ƒê·ªï b√™ t√¥ng m√≥ng v√† c·ªôt theo ƒë√∫ng quy tr√¨nh",
        workHours: 10,
        workersCount: 25,
        issues: "Kh√¥ng c√≥",
        notes: "Ch·∫•t l∆∞·ª£ng b√™ t√¥ng ƒë·∫°t y√™u c·∫ßu"
      },
      {
        title: "X√¢y t∆∞·ªùng g·∫°ch",
        weather: "n·∫Øng",
        temperature: 32,
        workDescription: "X√¢y t∆∞·ªùng g·∫°ch v√† b√™ t√¥ng t·∫ßng 1",
        workHours: 8,
        workersCount: 18,
        issues: "G·∫°ch h∆°i ·∫©m",
        notes: "C·∫ßn ph∆°i g·∫°ch tr∆∞·ªõc khi x√¢y"
      },
      {
        title: "L·∫Øp ƒë·∫∑t h·ªá th·ªëng ƒëi·ªán",
        weather: "m∆∞a nh·∫π",
        temperature: 24,
        workDescription: "L·∫Øp ƒë·∫∑t h·ªá th·ªëng ƒëi·ªán trong nh√†",
        workHours: 7,
        workersCount: 12,
        issues: "M∆∞a ·∫£nh h∆∞·ªüng ƒë·∫øn c√¥ng vi·ªác",
        notes: "C·∫ßn che ch·∫Øn thi·∫øt b·ªã ƒëi·ªán"
      },
      {
        title: "L·∫Øp ƒë·∫∑t h·ªá th·ªëng n∆∞·ªõc",
        weather: "n·∫Øng",
        temperature: 29,
        workDescription: "L·∫Øp ƒë·∫∑t h·ªá th·ªëng c·∫•p tho√°t n∆∞·ªõc",
        workHours: 8,
        workersCount: 10,
        issues: "Kh√¥ng c√≥",
        notes: "Ti·∫øn ƒë·ªô ƒë√∫ng k·∫ø ho·∫°ch"
      },
      {
        title: "L√°t n·ªÅn g·∫°ch",
        weather: "n·∫Øng",
        temperature: 31,
        workDescription: "L√°t n·ªÅn g·∫°ch v√† ƒë√° trang tr√≠",
        workHours: 9,
        workersCount: 15,
        issues: "Kh√¥ng c√≥",
        notes: "Ch·∫•t l∆∞·ª£ng l√°t n·ªÅn t·ªët"
      },
      {
        title: "S∆°n t∆∞·ªùng v√† trang tr√≠",
        weather: "m√¢y",
        temperature: 27,
        workDescription: "S∆°n t∆∞·ªùng v√† trang tr√≠ n·ªôi th·∫•t",
        workHours: 8,
        workersCount: 8,
        issues: "Kh√¥ng c√≥",
        notes: "M√†u s·∫Øc ƒë·∫πp, ƒë√∫ng thi·∫øt k·∫ø"
      },
      {
        title: "L·∫Øp ƒë·∫∑t c·ª≠a v√† c·ª≠a s·ªï",
        weather: "n·∫Øng",
        temperature: 28,
        workDescription: "L·∫Øp ƒë·∫∑t c·ª≠a v√† c·ª≠a s·ªï nh√¥m k√≠nh",
        workHours: 7,
        workersCount: 6,
        issues: "Kh√¥ng c√≥",
        notes: "C·ª≠a l·∫Øp ƒë·∫∑t ch·∫Øc ch·∫Øn"
      },
      {
        title: "L·∫Øp ƒë·∫∑t m√°i t√¥n",
        weather: "n·∫Øng",
        temperature: 33,
        workDescription: "L·∫Øp ƒë·∫∑t m√°i t√¥n v√† h·ªá th·ªëng tho√°t n∆∞·ªõc",
        workHours: 9,
        workersCount: 12,
        issues: "N·∫Øng n√≥ng ·∫£nh h∆∞·ªüng",
        notes: "C·∫ßn u·ªëng nhi·ªÅu n∆∞·ªõc"
      },
      {
        title: "Ho√†n thi·ªán v√† d·ªçn d·∫πp",
        weather: "m√¢y",
        temperature: 25,
        workDescription: "Ho√†n thi·ªán c√°c chi ti·∫øt v√† d·ªçn d·∫πp c√¥ng tr√¨nh",
        workHours: 8,
        workersCount: 20,
        issues: "Kh√¥ng c√≥",
        notes: "C√¥ng tr√¨nh g·∫ßn ho√†n th√†nh"
      },
      {
        title: "Ki·ªÉm tra v√† nghi·ªám thu",
        weather: "n·∫Øng",
        temperature: 26,
        workDescription: "Ki·ªÉm tra ch·∫•t l∆∞·ª£ng v√† nghi·ªám thu c√¥ng tr√¨nh",
        workHours: 6,
        workersCount: 8,
        issues: "Kh√¥ng c√≥",
        notes: "C√¥ng tr√¨nh ƒë·∫°t y√™u c·∫ßu k·ªπ thu·∫≠t"
      }
    ];

    const createdProjects = [];
    const createdWorkItems = [];
    const createdDailyLogs = [];

    // Create projects
    console.log('üìÅ Creating Projects...');
    for (let i = 0; i < projects.length; i++) {
      const project = projects[i];
      console.log(`Creating project ${i + 1}/12: ${project.name}`);
      
      const response = await fetch(`${baseUrl}/api/projects`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'x-organization-id': 'org_demo_1',
          'x-user-id': 'test-user-123'
        },
        body: JSON.stringify(project)
      });

      if (response.ok) {
        const data = await response.json();
        const createdProject = data.success ? data.data : data;
        createdProjects.push(createdProject);
        console.log(`‚úÖ Created project: ${createdProject.name} (ID: ${createdProject.id})`);
      } else {
        const error = await response.text();
        console.log(`‚ùå Failed to create project ${i + 1}: ${error}`);
      }
    }

    console.log(`\nüìã Created ${createdProjects.length} projects\n`);

    // Create work items for each project
    console.log('üîß Creating Work Items...');
    for (const project of createdProjects) {
      console.log(`Creating work items for project: ${project.name}`);
      
      for (let i = 0; i < workItemTemplates.length; i++) {
        const template = workItemTemplates[i];
        const workItem = {
          ...template,
          projectId: project.id,
          status: i < 3 ? 'completed' : i < 6 ? 'in_progress' : 'pending',
          assignedTo: `worker-${(i % 5) + 1}`,
          dueDate: new Date(Date.now() + (i + 1) * 7 * 24 * 60 * 60 * 1000).toISOString(),
          estimatedHours: Math.floor(Math.random() * 40) + 20,
          actualHours: i < 3 ? Math.floor(Math.random() * 40) + 20 : null
        };

        const response = await fetch(`${baseUrl}/api/projects/${project.id}/work-items`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'x-organization-id': 'org_demo_1',
            'x-user-id': 'test-user-123'
          },
          body: JSON.stringify(workItem)
        });

        if (response.ok) {
          const data = await response.json();
          const createdWorkItem = data.success ? data.data : data;
          createdWorkItems.push(createdWorkItem);
        } else {
          const error = await response.text();
          console.log(`‚ùå Failed to create work item: ${error}`);
        }
      }
    }

    console.log(`\nüìã Created ${createdWorkItems.length} work items\n`);

    // Create daily logs for each project
    console.log('üìù Creating Daily Logs...');
    for (const project of createdProjects) {
      console.log(`Creating daily logs for project: ${project.name}`);
      
      for (let i = 0; i < dailyLogTemplates.length; i++) {
        const template = dailyLogTemplates[i];
        const logDate = new Date(Date.now() - (dailyLogTemplates.length - i - 1) * 24 * 60 * 60 * 1000);
        
        const dailyLog = {
          ...template,
          logDate: logDate.toISOString(),
          photos: [] // Empty photos for now
        };

        const response = await fetch(`${baseUrl}/api/projects/${project.id}/daily-logs`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'x-organization-id': 'org_demo_1',
            'x-user-id': 'test-user-123'
          },
          body: JSON.stringify(dailyLog)
        });

        if (response.ok) {
          const data = await response.json();
          const createdDailyLog = data.success ? data.data : data;
          createdDailyLogs.push(createdDailyLog);
        } else {
          const error = await response.text();
          console.log(`‚ùå Failed to create daily log: ${error}`);
        }
      }
    }

    console.log(`\nüìã Created ${createdDailyLogs.length} daily logs\n`);

    // Summary
    console.log('üéâ Demo Data Creation Completed!');
    console.log('\nüìä Summary:');
    console.log(`‚úÖ Projects: ${createdProjects.length}/12`);
    console.log(`‚úÖ Work Items: ${createdWorkItems.length}/${projects.length * 12}`);
    console.log(`‚úÖ Daily Logs: ${createdDailyLogs.length}/${projects.length * 12}`);
    
    console.log('\nüìã Project List:');
    createdProjects.forEach((project, index) => {
      console.log(`${index + 1}. ${project.name} (ID: ${project.id}) - ${project.status}`);
    });

    console.log('\nüîß Next Steps:');
    console.log('1. Visit /dashboard/projects to see all projects');
    console.log('2. Click on any project to see work items and daily logs');
    console.log('3. Test the refresh functionality');
    console.log('4. Test creating new daily logs and work items');

  } catch (error) {
    console.error('üí• Error creating demo data:', error);
  }
};

createDemoData();
